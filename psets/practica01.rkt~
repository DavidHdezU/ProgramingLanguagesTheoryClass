#lang plai

;; esPar?: number -> boolean
(define (esPar? n)
  (= (modulo n 2) 0))

;; absoluto: number -> number
(define (absoluto z)
  (if (< z 0)
      (* z -1)
      z))

;; pares: number -> (listof number)
(define (pares n)
  (cuenta-desde-cero n 0))

;; cuenta-desde-cero: number -> number -> (listof number)
;; función auxiliar para crear una lista con un contador auxiliar que empieza desde 0
(define (cuenta-desde-cero n m)
  (cond
    [(< n m) empty] ;; Esto ya que buscamos todo los números menores a n, o sea aunque tengamos n = 10, no podemos tomar en cueta a 10 aunque (modulo 10 5) = 0
    [else (cons m (cuenta-desde-cero n (+ m 2)))]))

;; suma-cuadrados: number -> number
(define (suma-cuadrados n)
  (/ (* n (* (+ n 1) (+ 1 (* 2 n)))) 6))

;; discriminante: number number number -> number
(define (discriminante a b c)
  (- (* b b) (* 4 (* a c))))
